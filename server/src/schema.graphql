type User {
    id: ID!
    email: String!
    password: String!
    createdAt: String!
    updatedAt: String!
    roles: [UserRole!]!
}

type Instructor {
  id: ID!
  name: String!
  secondName: String!
  email: String!
  phone: String!
  createdAt: String!
  updatedAt: String!
}

type InstructorRequest {
  id: ID!
  name: String!
  secondName: String!
  phone: String!
  email: String!
  status: String!
  createdAt: String!
  updatedAt: String!
}

type InstructorRequestResponse {
  success: Boolean!
}



type AuthPayload {
  access_token: String 
  id: ID!
  email: String!
}


type Mutation {
    userRegister(email: String!, password: String!): AuthPayload!
    userLogin(email: String!, password: String!): AuthPayload!
    createInstructor(name: String!, secondName: String!, phone: String!): String!
    createInstructorRequest(name: String!, secondName: String!, phone: String!, email: String!): InstructorRequestResponse!
}

type Query {
    user: User!
    getInstructorsRequests: [InstructorRequest!]!
    getInstructorPendingRequest(email: String!): InstructorRequestResponse!
}

enum UserRole {
  USER
  INSTRUCTOR
  ADMIN
}