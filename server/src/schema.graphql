type User {
    id: String!
    email: String!
    password: String!
    createdAt: String!
    updatedAt: String!
    roles: [UserRole!]!
}

type Instructor {
  id: String!
  name: String!
  secondName: String!
  email: String!
  phone: String!
  createdAt: String!
  updatedAt: String!
}

type InstructorRequest {
  id: String!
  name: String!
  secondName: String!
  phone: String!
  email: String!
  status: String!
  createdAt: String!
  updatedAt: String!
}

type InstructorRequestResponse {
  success: Boolean!
}


type AuthPayload {
  access_token: String 
  id: ID!
  email: String!
}

type DeleteCourseResponse {
  success: Boolean!
  message: String!

}

type CreateLessonResponse {
  success: Boolean!
  message: String!
}

type UpdateLessonResponse {
  success: Boolean!
  message: String!
}

input CreateLessonInput {
  title: String!
  content: String!
  videoUrl: String!
  lessonOrder: Int!
  courseId: String!
  materials: String
}

input UpdateLessonInput {
  id: String!
  title: String!
  content: String!
  videoUrl: String!
  lessonOrder: Int!
  courseId: String!
  materials: String
}

type PageInfo {
  hasNextPage: Boolean!
  total: Int!
}

type CoursesResponse {
  courses: [Course!]!
  pageInfo: PageInfo!
}

input PaginationInput {
  take: Int = 6
  skip: Int = 0
}

type Mutation {
    userRegister(email: String!, password: String!): AuthPayload!
    userLogin(email: String!, password: String!): AuthPayload!
    createInstructor(name: String!, secondName: String!, phone: String!): String!
    createInstructorRequest(name: String!, secondName: String!, phone: String!, email: String!): InstructorRequestResponse!
    deleteCourse(courseId: String!): DeleteCourseResponse!
    createLesson(input: CreateLessonInput!): CreateLessonResponse!
    updateLesson(input: UpdateLessonInput!): UpdateLessonResponse!
}

type Query {
    user: User!
    getInstructorsRequests: [InstructorRequest!]!
    getInstructorPendingRequest(email: String!): InstructorRequestResponse!
    getCourseByInstructorId(instructorId: String!): [Course!]!
    getCourseById(courseId: String!): GetByIdCourseResponse!
    getLessonsByCourse(courseId: String!): GetLessonsResponse!
    getLessonById(lessonId: String!): Lesson!
    getCourses(pagination: PaginationInput): CoursesResponse!
}

type GetLessonsResponse {
  lessons: [Lesson!]!
  success: Boolean!
  message: String!
}

type Lesson {
  id: String!
  title: String!
  content: String!
  videoUrl: String!
  lessonOrder: Int!
  courseId: String!
  materials: String
}

type GetByIdCourseResponse {
  course: Course
  lessons: [Lesson!]!
}

type Course {
  id: String!
  title: String!
  description: String!
  price: Float!
  hours: Int!
  lessonsCount: Int!
  image: String!
  studentsCount: Int!
  isActive: Boolean!
}


enum UserRole {
  USER
  INSTRUCTOR
  ADMIN
}